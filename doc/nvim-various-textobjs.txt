*nvim-various-textobjs.txt*      For Neovim      Last change: 2024 December 04

==============================================================================
Table of Contents                    *nvim-various-textobjs-table-of-contents*

1. nvim-various-textobjs        |nvim-various-textobjs-nvim-various-textobjs-|
  - Table of contents|nvim-various-textobjs-nvim-various-textobjs--table-of-contents|
  - List of text objects|nvim-various-textobjs-nvim-various-textobjs--list-of-text-objects|
  - Installation   |nvim-various-textobjs-nvim-various-textobjs--installation|
  - Configuration |nvim-various-textobjs-nvim-various-textobjs--configuration|
  - Advanced usage / API|nvim-various-textobjs-nvim-various-textobjs--advanced-usage-/-api|
  - Limitations & non-goals|nvim-various-textobjs-nvim-various-textobjs--limitations-&-non-goals|
  - Other text object plugins|nvim-various-textobjs-nvim-various-textobjs--other-text-object-plugins|
  - Credits             |nvim-various-textobjs-nvim-various-textobjs--credits|

==============================================================================
1. nvim-various-textobjs        *nvim-various-textobjs-nvim-various-textobjs-*



Bundleof more than 30 new textobjects for Neovim.


TABLE OF CONTENTS*nvim-various-textobjs-nvim-various-textobjs--table-of-contents*

- |nvim-various-textobjs-list-of-text-objects|
- |nvim-various-textobjs-installation|
- |nvim-various-textobjs-configuration|
    - |nvim-various-textobjs-options|
    - |nvim-various-textobjs-use-your-own-keybindings|
- |nvim-various-textobjs-advanced-usage-/-api|
    - |nvim-various-textobjs-`ii`-on-unindented-line-should-select-entire-buffer|
    - |nvim-various-textobjs-smarter-`gx`|
    - |nvim-various-textobjs-delete-surrounding-indentation|
    - |nvim-various-textobjs-yank-surrounding-indentation|
    - |nvim-various-textobjs-indent-last-paste|
    - |nvim-various-textobjs-other-ideas?|
- |nvim-various-textobjs-limitations-&-non-goals|
- |nvim-various-textobjs-other-text-object-plugins|
- |nvim-various-textobjs-credits|


LIST OF TEXT OBJECTS*nvim-various-textobjs-nvim-various-textobjs--list-of-text-objects*

  ---------------------------------------------------------------------------------------------------------------
  textobject               description             inner / outer          forward-seeking    default  filetypes
                                                                                             keymaps  (for
                                                                                                      default
                                                                                                      keymaps)
  ------------------------ ----------------------- ---------------------- ----------------- --------- -----------
  indentation              surrounding lines with  see overview from      -                  ii, ai,  all
                           same or higher          vim-indent-object                        aI, (iI)  
                           indentation                                                                

  restOfIndentation        lines down with same or -                      -                     R     all
                           higher indentation                                                         

  greedyOuterIndentation   outer indentation,      outer includes a       -                   ag/ig   all
                           expanded to blank       blank, like ap/ip                                  
                           lines; useful to get                                                       
                           functions with                                                             
                           annotations                                                                

  subword                  like iw, but for        outer includes         -                   iS/aS   all
                           segments of camelCase,  trailing _ or -                                    
                           snake_case, and                                                            
                           kebab-case words.                                                          

  toNextClosingBracket     from cursor to next     -                      small                 C     all
                           closing ], ), or }                                                         

  toNextQuotationMark      from cursor to next     -                      small                 Q     all
                           unescaped[1] ", ', or `                                                    

  anyQuote                 between any             outer includes the     small               iq/aq   all
                           unescaped[2] ", ', or ` quotation marks                                    
                           in a line                                                                  

  anyBracket               between any (), [], or  outer includes the     small               io/ao   all
                           {} in a line            brackets                                           

  restOfParagraph          like }, but linewise    -                      -                     r     all

  entireBuffer             entire buffer as one    -                      -                    gG     all
                           text object                                                                

  nearEoL                  from cursor position to -                      -                     n     all
                           end of line, minus one                                                     
                           character                                                                  

  lineCharacterwise        current line, but       outer includes         -                   i_/a_   all
                           characterwise           indentation and                                    
                                                   trailing spaces                                    

  column                   column down until       -                      -                    \|     all
                           indent or shorter line.                                                    
                           Accepts {count} for                                                        
                           multiple columns.                                                          

  value                    value of key-value      outer includes         small               iv/av   all
                           pair, or right side of  trailing commas or                                 
                           assignment, excl.       semicolons                                         
                           trailing comment (in a                                                     
                           line)                                                                      

  key                      key of key-value pair,  outer includes the =   small               ik/ak   all
                           or left side of an      or :                                               
                           assignment                                                                 

  url                      works with http[s] or   -                      big                   L     all
                           any other protocol                                                         

  number                   numbers, similar to     inner: only pure       small               in/an   all
                           <C-a>                   digits, outer: number                              
                                                   including minus sign                               
                                                   and decimal point                                  

  diagnostic               LSP diagnostic          -                      âˆž                     !     all
                           (requires built-in LSP)                                                    

  closedFold               closed fold             outer includes one     big                 iz/az   all
                                                   line after the last                                
                                                   folded line                                        

  chainMember              section of a chain      outer includes the     small               im/am   all
                           connected with . like   leading . (or :)                                   
                           foo.bar or                                                                 
                           foo.baz(para)                                                              

  visibleInWindow          all lines visible in    -                      -                    gw     all
                           the current window                                                         

  restOfWindow             from the cursorline to  -                      -                    gW     all
                           the last line in the                                                       
                           window                                                                     

  lastChange               Last                    -                      -                    g;     all
                           non-deletion-change,                                                       
                           yank, or paste.[3]                                                         

  mdLink                   markdown link like      inner is only the link small               il/al   markdown,
                           [title](url)            title (between the [])                             toml

  mdEmphasis               markdown text enclosed  inner is only the      small               ie/ae   markdown
                           by *, **, _, __, ~~, or emphasis content                                   
                           ==                                                                         

  mdFencedCodeBlock        markdown fenced code    outer includes the     big                 iC/aC   markdown
                           (enclosed by three      enclosing backticks                                
                           backticks)                                                                 

  cssSelector              class in CSS like       outer includes         small               ic/ac   css, scss
                           .my-class               trailing comma and                                 
                                                   space                                              

  cssColor                 color in CSS (hex, rgb, inner includes only    small               i#/a#   css, scss
                           or hsl)                 the color value                                    

  htmlAttribute            attribute in html/xml   inner is only the      small               ix/ax   html, xml,
                           like href="foobar.com"  value inside the                                   css, scss,
                                                   quotes                                             vue

  doubleSquareBrackets     text enclosed by [[]]   outer includes the     small               iD/aD   lua, shell,
                                                   four square brackets                               neorg,
                                                                                                      markdown

  shellPipe                segment until/after a   outer includes the     small               iP/aP   bash, zsh,
                           pipe character (\|)     pipe                                               fish, sh

  pyTripleQuotes           python strings          inner excludes the """ -                   iy/ay   python
                           surrounded by three     or '''                                             
                           quotes (regular or                                                         
                           f-string)                                                                  

  notebookCell             cell delimited by       outer includes the     -                   iN/aN   all
                           double percent comment, bottom cell border                                 
                           such as # %%                                                               
  ---------------------------------------------------------------------------------------------------------------

[1] This respects vimâ€™s quoteescape option.

[2] This respects vimâ€™s quoteescape option.

[3] The lastChange textobject does not work well with plugins that
manipulate paste operations such as yanky.nvim or plugins that auto-save
the buffer.

INSTALLATION       *nvim-various-textobjs-nvim-various-textobjs--installation*

**Variant 1:** Have `nvim-various-textobjs` set up all the keybindings from the
table above for you.

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-various-textobjs",
        event = "VeryLazy",
        opts = { useDefaultKeymaps = true },
    },
    
    -- packer
    use {
        "chrisgrieser/nvim-various-textobjs",
        config = function () 
            require("various-textobjs").setup({ useDefaultKeymaps = true })
        end,
    }
<

**Variant 2:** Use your own keybindings. See the
|nvim-various-textobjs-configuration| section for information on setting your
own keymaps.

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-various-textobjs",
        keys = {
            -- ...
        },
    },
    
    -- packer
    use { "chrisgrieser/nvim-various-textobjs" }
<


  [!TIP] You can also use the `disabledKeymaps` config option to disable only
  _some_ default keymaps.

CONFIGURATION     *nvim-various-textobjs-nvim-various-textobjs--configuration*


OPTIONS ~

The `.setup()` call is optional if you are fine with the defaults below.

>lua
    -- default config
    require("various-textobjs").setup {
        -- See overview table in README for the defaults keymaps. 
        -- (Note that lazy-loading this plugin, the default keymaps cannot be set up.
        -- if you set this to `true`, you thus need to add `event = "VeryLazy"` to your
        -- lazy.nvim config.)
        useDefaultKeymaps = false,
    
        ---@type string[]
        disabledKeymaps = {}, -- disable only some default keymaps, e.g. { "ai", "ii" }
    
        -- Number of lines to seek forwards for a text object. See the overview table
        -- in the README for which text object uses which value.
        forwardLooking = {
            small = 5,
            big = 15,
        },
    
        notify = {
            icon = "ó° ±", -- only used with notification plugins like `nvim-notify`
            whenObjectNotFound = true,
        },
    
        textobjs = {
            diagnostic = { 
                wrap = true 
            },
            subword = {
                -- When deleting the start of a camelCased word, the result should still be
                -- camelCased and not PascalCased (see #113).
                noCamelToPascalCase = true,
            },
        },
    }
<


USE YOUR OWN KEYBINDINGS ~

If you want to set your own keybindings, you can do so by calling the
respective functions. The function names correspond to the textobject names
from the |nvim-various-textobjs-overview-table|.


  [!NOTE] For dot-repeat to work, you have to call the motions as Ex-commands.
  When using `function() require("various-textobjs").diagnostic() end` as third
  argument of the keymap, dot-repeatability is not going to work.
>lua
    -- example: `U` for url textobj
    vim.keymap.set({ "o", "x" }, "U", '<cmd>lua require("various-textobjs").url()<CR>')
    
    -- example: `as` for outer subword, `is` for inner subword
    vim.keymap.set({ "o", "x" }, "as", '<cmd>lua require("various-textobjs").subword("outer")<CR>')
    vim.keymap.set({ "o", "x" }, "is", '<cmd>lua require("various-textobjs").subword("inner")<CR>')
<

For most text objects, there is only one parameter which accepts `"inner"` or
`"outer"`. There only exceptions is the indentation textobject:

>lua
    -- THE INDENTATION TEXTOBJ requires two parameters, the first for
    -- exclusion of the starting border, the second for the exclusion of ending border
    vim.keymap.set(
        { "o", "x" },
        "ii",
        '<cmd>lua require("various-textobjs").indentation("inner", "inner")<CR>'
    )
    vim.keymap.set(
        { "o", "x" },
        "ai",
        '<cmd>lua require("various-textobjs").indentation("outer", "inner")<CR>'
    )
    
    -- an additional parameter can be passed to control whether blank lines are included
    vim.keymap.set(
        { "o", "x" },
        "ai",
        '<cmd>lua require("various-textobjs").indentation("outer", "inner", "noBlanks")<CR>'
    )
<


ADVANCED USAGE / API*nvim-various-textobjs-nvim-various-textobjs--advanced-usage-/-api*

All textobjects can also be used as an API to modify their behavior or create
custom commands. Here are some examples:


II ON UNINDENTED LINE SHOULD SELECT ENTIRE BUFFER ~

Using a simple if-else-block, you can create a hybrid of the inner indentation
text object and the entire-buffer text object, if you prefer that kind of
behavior:

>lua
    -- when on unindented line, `ii` should select entire buffer
    vim.keymap.set("o", "ii", function()
        if vim.fn.indent(".") == 0 then
            require("various-textobjs").entireBuffer()
        else
            require("various-textobjs").indentation("inner", "inner")
        end
    end)
<


SMARTER GX ~

The code below retrieves the next URL (within the amount of lines configured in
the `setup` call), and opens it in your browser. As opposed to vimâ€™s built-in
`gx`, this is **forward-seeking**, meaning your cursor does not have to stand
on the URL.

>lua
    vim.keymap.set("n", "gx", function()
        -- select URL
        require("various-textobjs").url()
    
        -- plugin only switches to visual mode when textobj is found
        local foundURL = vim.fn.mode() == "v"
        if not foundURL then return end
    
        -- retrieve URL with the z-register as intermediary
        vim.cmd.normal { '"zy', bang = true }
        local url = vim.fn.getreg("z")
        vim.ui.open(url) -- requires nvim 0.10
    end, { desc = "URL Opener" })
<

You could go even further: When no URL can be found by `various-textobjs`, you
could retrieve all URLs in the buffer and select one to open. (The URL-pattern
used by this plugin is exposed for this purpose.)

>lua
    vim.keymap.set("n", "gx", function()
        require("various-textobjs").url()
        local foundURL = vim.fn.mode() == "v"
        if foundURL then
            vim.cmd.normal('"zy')
            local url = vim.fn.getreg("z")
            vim.ui.open(url)
            return
        end
    
        -- find all URLs in buffer
        local urlPattern = "%l%l%l-://%S+"
        local bufText = table.concat(vim.api.nvim_buf_get_lines(0, 0, -1, false), "\n")
        local urls = {}
        for url in bufText:gmatch(urlPattern) do
            table.insert(urls, url)
        end
        if #urls == 0 then return end
    
        -- select one, use a plugin like dressing.nvim for nicer UI for
        -- `vim.ui.select`
        vim.ui.select(urls, { prompt = "Select URL:" }, function(choice)
            if choice then vim.ui.open(choice) end
        end)
    end, { desc = "URL Opener" })
<


DELETE SURROUNDING INDENTATION ~

Using the indentation textobject, you can also create custom
indentation-related utilities. A common operation is to remove the line before
and after an indentation. Take for example this case where you are removing the
`foo` condition:

>lua
    -- before
    if foo then
        print("bar") -- <- cursor is on this line
        print("baz")
    end
    
    -- after
    print("bar")
    print("baz")
<

The code below achieves this by dedenting the inner indentation textobject
(essentially running `<ii`), and deleting the two lines surrounding it. As for
the mapping, `dsi` should make sense since this command is similar to the `ds`
operator from vim-surround <https://github.com/tpope/vim-surround> but
performed on an indentation textobject. (It is also an intuitive mnemonic:
Delete Surrounding Indentation.)

>lua
    vim.keymap.set("n", "dsi", function()
        -- select outer indentation
        require("various-textobjs").indentation("outer", "outer")
    
        -- plugin only switches to visual mode when a textobj has been found
        local indentationFound = vim.fn.mode():find("V")
        if not indentationFound then return end
    
        -- dedent indentation
        vim.cmd.normal { "<", bang = true }
    
        -- delete surrounding lines
        local endBorderLn = vim.api.nvim_buf_get_mark(0, ">")[1]
        local startBorderLn = vim.api.nvim_buf_get_mark(0, "<")[1]
        vim.cmd(tostring(endBorderLn) .. " delete") -- delete end first so line index is not shifted
        vim.cmd(tostring(startBorderLn) .. " delete")
    end, { desc = "Delete Surrounding Indentation" })
<


YANK SURROUNDING INDENTATION ~

Similarly, you can also create a `ysii` command to yank the two lines
surrounding an indentation textobject. (Not using `ysi`, since that blocks
surround commands like `ysi)`). Using `nvim_win_[gs]et_cursor()`, you make the
operation sticky, meaning the cursor is not moved. `vim.highlight.range` is
used to highlight the yanked text, to imitate the effect of
`vim.highlight.yank`.

>lua
    vim.keymap.set("n", "ysii", function()
        local startPos = vim.api.nvim_win_get_cursor(0)
    
        -- identify start- and end-border
        require("various-textobjs").indentation("outer", "outer")
        local indentationFound = vim.fn.mode():find("V")
        if not indentationFound then return end
        vim.cmd.normal { "V", bang = true } -- leave visual mode so the '< '> marks are set
    
        -- copy them into the + register
        local startLn = vim.api.nvim_buf_get_mark(0, "<")[1] - 1
        local endLn = vim.api.nvim_buf_get_mark(0, ">")[1] - 1
        local startLine = vim.api.nvim_buf_get_lines(0, startLn, startLn + 1, false)[1]
        local endLine = vim.api.nvim_buf_get_lines(0, endLn, endLn + 1, false)[1]
        vim.fn.setreg("+", startLine .. "\n" .. endLine .. "\n")
    
        -- highlight yanked text
        local ns = vim.api.nvim_create_namespace("ysi")
        vim.api.nvim_buf_add_highlight(0, ns, "IncSearch", startLn, 0, -1)
        vim.api.nvim_buf_add_highlight(0, ns, "IncSearch", endLn, 0, -1)
        vim.defer_fn(function() vim.api.nvim_buf_clear_namespace(0, ns, 0, -1) end, 1000)
    
        -- restore cursor position
        vim.api.nvim_win_set_cursor(0, startPos)
    end, { desc = "Yank surrounding indentation" })
<


INDENT LAST PASTE ~

The `lastChange` textobject can be used to indent the last text that was
pasted. This is useful in languages such as Python where indentation is
meaningful and thus formatters are not able to automatically indent everything
for you.

If you do not use `P` for upwards paste, "shift paste" serves as a great
mnemonic.

>lua
    vim.keymap.set("n", "P", function()
        require("various-textobjs").lastChange()
        local changeFound = vim.fn.mode():find("v")
        if changeFound then vim.cmd.normal { ">", bang = true } end
    end
<


OTHER IDEAS? ~

If you have some other useful ideas, feel free to share them in this repoâ€™s
discussion page
<https://github.com/chrisgrieser/nvim-various-textobjs/discussions>.


LIMITATIONS & NON-GOALS*nvim-various-textobjs-nvim-various-textobjs--limitations-&-non-goals*

- This plugin uses pattern matching, so it can be inaccurate in some edge cases.
- The characterwise textobjects do not match multi-line objects. Most notably,
    this affects the value textobject.
- nvim-treesitter-textobjects <https://github.com/nvim-treesitter/nvim-treesitter-textobjects>
    already does an excellent job when it comes to using Treesitter for text
    objects, such as function arguments or loops. This pluginâ€™s goal is therefore
    not to provide textobjects already offered by `nvim-treesitter-textobjects`.


OTHER TEXT OBJECT PLUGINS*nvim-various-textobjs-nvim-various-textobjs--other-text-object-plugins*

- treesitter-textobjects <https://github.com/nvim-treesitter/nvim-treesitter-textobjects>
- treesitter-textsubjects <https://github.com/RRethy/nvim-treesitter-textsubjects>
- ts-hint-textobject <https://github.com/mfussenegger/nvim-ts-hint-textobject>
- mini.ai <https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-ai.md>
- targets.vim <https://github.com/wellle/targets.vim>


CREDITS                 *nvim-various-textobjs-nvim-various-textobjs--credits*

**Thanks** - To the `Valuable Dev` for their blog post on how to get started
with creating custom text objects
<https://thevaluable.dev/vim-create-text-objects/>. - To `@vypxl` and `@ii14`
for figuring out dot-repeatability.
<https://github.com/chrisgrieser/nvim-spider/pull/4>

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

- Website <https://chris-grieser.de/>
- Mastodon <https://pkm.social/@pseudometa>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser>
- LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
